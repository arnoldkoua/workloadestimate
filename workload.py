import streamlit as st
import pandas as pd
#import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
from docx import Document
from docx.shared import Inches

# Initialisation
st.set_page_config(page_title="Estimation charge de travail", layout="wide")
st.title("üïí Estimation de la charge de travail")

# Mode d'analyse
mode = st.sidebar.radio("Mode d'analyse", ["Responsables Projet", "Agents Techniques"])

# === MODULE POUR LES RESPONSABLES PROJET ===
if mode == "Responsables Projet":
    mode_rp = st.sidebar.radio("Mode RP", ["Staff unique"])

    # Info sur les seuils de fr√©quence mensuelle
    with st.expander("‚ÑπÔ∏è Aide - Seuils typiques de fr√©quence mensuelle"):
        st.markdown("""
        - **1.0** = t√¢che mensuelle (1x/mois)
        - **0.25** = t√¢che trimestrielle (1x/3 mois)
        - **0.5** = t√¢che bimestrielle (1x/2 mois)
        - **0.166** = t√¢che semestrielle (1x/6 mois)
        - **0.083** = t√¢che annuelle (1x/12 mois)
        - **2.0** = t√¢che bimensuelle (2x/mois)
        - **4.0** = t√¢che hebdomadaire (1x/semaine)
        - **20.0** = t√¢che quotidienne (5j/semaine en moyenne)
        """)

    # Param√®tre global : heures totales de travail/mois
    heures_max_mensuelles = st.sidebar.number_input("Heures de travail max/personne/mois", min_value=1, value=160)
    temps_adm = st.sidebar.number_input("Temps administratif mensuel (en heures)", min_value=0.0, value=4.0, step=0.5)
    temps_forma = st.sidebar.number_input("Temps de formation continue / renforcement (en heures)", min_value=0.0, value=2.0, step=0.5)
    marge_imprevue = st.sidebar.slider("% de marge pour impr√©vus", min_value=0, max_value=30, value=5)

    if mode_rp == "√âquipe":
        pass
    else:
        st.sidebar.header("üîç Staff unique - Param√®tres")
        staff_file = st.sidebar.file_uploader("üìÖ Charger un fichier avec les projets par RP (matricule, nb_projets) : ", type=["xlsx"])

        charges_par_agent = {}  # Initialize charges_par_agent here to avoid scope issues
        
        if staff_file:
            agent_data = pd.read_excel(staff_file)

            rp_data = pd.DataFrame({
                "T√¢che": [
                    "Proposition des plan de rem√©diation ou de mitigation",
                    "Suivi du processus de validation des plans de rem√©diation",
                    "V√©rification et validation des planification des BR",
                    "Organisation des missions terrain de v√©rification de la qualit√© d'intervention",
                    "Suivi des actions de rem√©diation aupr√®s des b√©n√©ficiaires",
                    "Elaboration de budget",
                    "Suivi budg√©taire",
                    "Participer aux r√©union trimestrielle de coordination ICI Geneve",
                    "Organiser et participer √† la reunion mensuelle avec le partenaire",
                    "Organiser et participer aux missions conjointes de suivis des activit√©s sur le terrain",
                    "Participer au d√©veloppement d'outils et d'approche",
                    "Elaborer des TDRs pour ateliers de formation",
                    "Organiser l'atelier annuelle de renforcement",
                    "Analyse des programmes de suivi des coachs",
                    "Rapport mensuel de suivi des Coachs",
                    "Travail avec les finances",
                    "Travail avec la logistique",
                    "Travail avec la communication",
                    "Travail avec l'√©quipe travail forc√©",
                    "Travail avec l'√©quipe formation",
                    "Conception des outils d'enqu√™te",
                    "Pr√©sentation des r√©sultats d'enqu√™te",
                    "Rapport narratif d'avancement",
                    "Liste nominative des enfants travailleurs rem√©di√©s",
                    "Rapport situationnel mensuel",
                    "Compte rendu r√©unions avec le partenaire",
                    "Templates du partenaire",
                    "Point de suivi SSRTE",
                    "KPI mensuel"
                ],
                "Dur√©e (heures)": [1.5, 1, 1, 2, 3, 1.25, 1, 0.5, 0.1, 0.5, 0.1, 0, 0.5, 0.5, 0.5, 0.5, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 2, 2, 1, 0.1, 0.1, 0.1, 0.5],
                "Fr√©quence mensuelle": [1, 4, 1, 1, 4, 1, 4, 0.33, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1]
            })

            st.subheader("üìù Liste des T√¢ches (RP)")
            with st.expander("‚ÑπÔ∏è Section - Valeurs des param√®tres de calcul"):
                edited_df = st.data_editor(rp_data, num_rows="dynamic", use_container_width=True)        

            results = []

            for _, row in agent_data.iterrows():
                agent_id = row["Matricule"]
                nb_projets = row["Nombre de projets"]
                df = edited_df.copy()
                df["Temps par projet (h)"] = df["Dur√©e (heures)"] * df["Fr√©quence mensuelle"]
                df["Temps total (tous projets)"] = df["Temps par projet (h)"] * nb_projets
                
                total_heur = df["Temps total (tous projets)"].sum()
                total_heur += temps_adm + temps_forma
                total_heures = total_heur * (1 + marge_imprevue / 100)
                charge_pct = (total_heures / heures_max_mensuelles) * 100

                charges_par_agent[agent_id] = df.copy()

                if charge_pct <= 40:
                    statut = "‚úÖ Charge faible. Il reste de la marge pour ajouter d'autres responsabilit√©s."
                    nb_requi = 1
                elif charge_pct <= 85:
                    statut = "‚û°Ô∏è Charge mod√©r√©e. Suivi recommand√© si d'autres t√¢ches sont attendues."
                    nb_requi = 1
                elif charge_pct <= 100:
                    statut = "üî∂ Charge √©lev√©e. Un ajustement organisationnel peut √™tre envisag√©."
                    nb_requi = 1
                else:
                    statut = "‚ö†Ô∏è Surcharge d√©tect√©e. Il est conseill√© d'envisager le recrutement de responsable(s) projet(s) suppl√©mentaire(s)."
                    nb_requi = int(total_heures / heures_max_mensuelles + 0.99)

                results.append({
                    "Matricule": agent_id,
                    "Nombre total d'heures de travail/mois": heures_max_mensuelles,
                    "Nombre de projets": nb_projets,
                    "Heures totales": total_heures,
                    "% de charge": round(charge_pct, 1),
                    "Statut": statut,
                    "Nombre de RP requis": nb_requi
                })

            result_df = pd.DataFrame(results)
            st.subheader("üìã R√©sultats par agent")
            with st.expander("‚ÑπÔ∏è Section - R√©sultats par agent"):
                st.dataframe(result_df)

                output = BytesIO()
                result_df.to_excel(output, index=False, engine="openpyxl")
                st.download_button(
                    label="üìÄ T√©l√©charger les r√©sultats (Excel)",
                    data=output.getvalue(),
                    file_name="charges_par_agent.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            st.subheader("üìä Temps total par t√¢che")
            with st.expander("‚ÑπÔ∏è Section - Temps total par t√¢che"):
                # Only display chart options if we have data
                if charges_par_agent:
                    agent_ids = ["Tous"] + list(charges_par_agent.keys())
                    selected_agent = st.selectbox("S√©lectionner un agent pour voir le graphique des t√¢ches :", agent_ids)
    
                    if selected_agent == "Tous":
                        df_concat = pd.concat(charges_par_agent.values(), ignore_index=True)
                        total_per_task = df_concat.groupby("T√¢che")["Temps total (tous projets)"].sum().reset_index()
                        total_per_task = total_per_task.sort_values("Temps total (tous projets)")
                        title = "Histogramme du temps total par t√¢che - Tous les agents"
                    else:
                        selected_df = charges_par_agent[selected_agent]
                        total_per_task = selected_df.groupby("T√¢che")["Temps total (tous projets)"].sum().reset_index()
                        total_per_task = total_per_task.sort_values("Temps total (tous projets)")
                        title = f"Histogramme du temps total par t√¢che - Agent {selected_agent}"
    
                    # Pr√©paration des donn√©es avec les valeurs format√©es directement
                    total_per_task["text_values"] = total_per_task["Temps total (tous projets)"].apply(lambda x: f"{x:.1f}")
                    
                    # Inside the chart generation section
                    # Cr√©ation du graphique interactif avec Plotly
                    fig = px.bar(
                        total_per_task,
                        x="Temps total (tous projets)",
                        y="T√¢che",
                        orientation='h',
                        title=title,
                        labels={"Temps total (tous projets)": "Heures totales", "T√¢che": ""},
                        text="text_values"  # Utiliser la colonne format√©e
                    )

                    # Personnalisation du graphique avec √©tiquettes √† l'int√©rieur
                    fig.update_traces(
                        textposition='inside',       # Position des √©tiquettes √† l'int√©rieur des barres
                        textfont=dict(
                            size=14,
                            color='white'            # Couleur blanche pour contraster avec les barres
                        )
                    )

                    # Personnalisation du graphique
                    fig.update_layout(
                        height=800,
                        width=900,
                        yaxis={'categoryorder':'total ascending'},
                        margin=dict(l=10, r=10, t=50, b=10),
                        hoverlabel=dict(bgcolor="white", font_size=14),
                        title={
                            'text': title,
                            'x': 0.5,        # Centre le titre horizontalement
                            'xanchor': 'center',  # Point d'ancrage du titre
                            'yanchor': 'top'      # Position verticale du titre
                        }
                    )
                    
                    # Affichage du graphique
                    st.plotly_chart(fig, use_container_width=True)

# === MODULE POUR LES AGENTS TECHNIQUES ===

elif mode == "Agents Techniques":
    mode_at = st.sidebar.radio("Mode AT", ["Staff unique"])

    # Info sur les seuils de fr√©quence mensuelle
    with st.expander("‚ÑπÔ∏è Aide - Seuils typiques de fr√©quence mensuelle"):
        st.markdown("""
        - **1.0** = t√¢che mensuelle (1x/mois)
        - **0.25** = t√¢che trimestrielle (1x/3 mois)
        - **0.5** = t√¢che bimestrielle (1x/2 mois)
        - **0.166** = t√¢che semestrielle (1x/6 mois)
        - **0.083** = t√¢che annuelle (1x/12 mois)
        - **2.0** = t√¢che bimensuelle (2x/mois)
        - **4.0** = t√¢che hebdomadaire (1x/semaine)
        - **20.0** = t√¢che quotidienne (5j/semaine en moyenne)
        """)

    # Param√®tre global : temps de d√©placement moyen & heures totales de travail/mois
    heures_max_mensuelles = st.sidebar.number_input("Heures de travail max/personne/mois", min_value=1, value=160)
    temps_deplacement = st.sidebar.number_input("Temps moyen de d√©placement (aller-retour, en heures)", min_value=0.0, value=1.0, step=0.1)
    temps_admin = st.sidebar.number_input("Temps administratif mensuel (en heures)", min_value=0.0, value=4.0, step=0.5)
    temps_formation = st.sidebar.number_input("Temps de formation continue / renforcement (en heures)", min_value=0.0, value=2.0, step=0.5)
    marge_imprevus = st.sidebar.slider("% de marge pour impr√©vus", min_value=0, max_value=30, value=5)

    if mode_at == "√âquipe":
        pass

    else:
        st.sidebar.header("üîç Staff unique - Param√®tres")
        staff_file = st.sidebar.file_uploader("üì• Charger un fichier avec les projets par agent (matricule, nb_projets, coop√©ratives, structures, agents op)", type=["xlsx"])
        uploaded_file = st.sidebar.file_uploader("üì• Charger le fichier des t√¢ches associ√©es", type=["xlsx"])
        # heures_max_mensuelles = st.sidebar.number_input("Heures de travail max/mois pour chaque AT", min_value=1, value=160)

        charges_par_at = {}  # Initialize charges_par_at here to avoid scope issues

        if staff_file and uploaded_file:
            agent_data = pd.read_excel(staff_file)
            task_df = pd.read_excel(uploaded_file)

            results = []

            for _, row in agent_data.iterrows():
                agent_id = row["Matricule"]
                nb_projet = row["Nombre de projets"]
                nb_coop = row["Nombre de coop√©ratives"]
                nb_struc = row["Nombre de structures"]
                nb_agents_ope = row["Nombre d'agents op√©rationnels"]

                df = task_df.copy()
                multiplicateurs = {
                    # "projet": nb_projets,
                    "coop√©rative": nb_coop,
                    "structure": nb_struc,
                    "agent_op": nb_agents_ope,
                    "unique": 1
                }
                df["Temps total (heures)"] = (
                    (df["Dur√©e (heures)"] + temps_deplacement) *
                    df["Fr√©quence mensuelle"] *
                    df["Facteur"].map(multiplicateurs)
                )

                base_heures = df["Temps total (heures)"].sum()
                base_heures += temps_admin + temps_formation
                total_heure = base_heures * (1 + marge_imprevus / 100)
                charge_pct = (total_heure / heures_max_mensuelles) * 100

                charges_par_at[agent_id] = df.copy()

                if charge_pct <= 40:
                    statut = "‚úÖ Charge faible. Il reste de la marge pour ajouter d'autres missions."
                    nb_requis = 1
                elif charge_pct <= 85:
                    statut = "‚û°Ô∏è Charge mod√©r√©e. Un suivi peut √™tre utile."
                    nb_requis = 1
                elif charge_pct <= 100:
                    statut = "üî∂ Charge √©lev√©e. R√©√©valuation possible."
                    nb_requis = 1
                else:
                    statut = "‚ö†Ô∏è Surcharge d√©tect√©e. Recrutement conseill√© : AT suppl√©mentaire(s)."
                    nb_requis = int(total_heure / heures_max_mensuelles + 0.99)

                results.append({
                    "Matricule": agent_id,
                    "Nombre total d'heures de travail/mois": heures_max_mensuelles,
                    "Nombre de projets": nb_projet,
                    "Nombre de coop√©ratives": nb_coop,
                    "Nombre de structures": nb_struc,
                    "Nombre d'agents op√©rationnels": nb_agents_ope,
                    "Heures totales": total_heure,
                    "% de charge": round(charge_pct, 1),
                    "Statut": statut,
                    "Nombre d'AT requis": nb_requis
                })

            result_df = pd.DataFrame(results)
            st.subheader("üìã R√©sultats par agent technique")
            with st.expander("‚ÑπÔ∏è Section - R√©sultats par agent technique"):
                st.dataframe(result_df)
    
                output = BytesIO()
                result_df.to_excel(output, index=False, engine="openpyxl")
                st.download_button(
                    label="üíæ T√©l√©charger les r√©sultats (Excel)",
                    data=output.getvalue(),
                    file_name="Charges_par_AT.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            st.subheader("üìä Temps total par t√¢che")
            with st.expander("‚ÑπÔ∏è Section - Temps total par t√¢che"):
                # Only display chart options if we have data
                if charges_par_at:
                    agent_ids = ["Tous"] + list(charges_par_at.keys())
                    selected_at = st.selectbox("S√©lectionner un agent pour voir le graphique des t√¢ches :", agent_ids)
    
                    # Dans la section de g√©n√©ration du graphique, remplacez le code Matplotlib par:
                    if selected_at == "Tous":
                        df_concat = pd.concat(charges_par_at.values(), ignore_index=True)
                        total_per_task = df_concat.groupby("T√¢che")["Temps total (heures)"].sum().reset_index()
                        total_per_task = total_per_task.sort_values("Temps total (heures)")
                        title = "Histogramme du temps total par t√¢che - Tous les agents"
                    else:
                        selected_df = charges_par_at[selected_at]
                        total_per_task = selected_df.groupby("T√¢che")["Temps total (heures)"].sum().reset_index()
                        total_per_task = total_per_task.sort_values("Temps total (heures)")
                        title = f"Histogramme du temps total par t√¢che - Agent {selected_at}"
                    
                    # Pr√©paration des donn√©es avec les valeurs format√©es directement
                    total_per_task["text_values"] = total_per_task["Temps total (heures)"].apply(lambda x: f"{x:.1f}")

                    # Cr√©ation du graphique interactif avec Plotly
                    fig = px.bar(
                        total_per_task,
                        x="Temps total (heures)",
                        y="T√¢che",
                        orientation='h',
                        title=title,
                        labels={"Temps total (heures)": "Heures totales", "T√¢che": ""},
                        text="text_values"  # Utiliser la colonne format√©e
                    )

                    # Personnalisation du graphique avec √©tiquettes √† l'int√©rieur
                    fig.update_traces(
                        textposition='inside',       # Position des √©tiquettes √† l'int√©rieur des barres
                        textfont=dict(
                            size=14,
                            color='white'            # Couleur blanche pour contraster avec les barres
                        )
                    )

                    # Personnalisation du graphique
                    fig.update_layout(
                        height=800,
                        width=900,
                        yaxis={'categoryorder':'total ascending'},
                        margin=dict(l=10, r=10, t=50, b=10),
                        hoverlabel=dict(bgcolor="white", font_size=14),
                        title={
                            'text': title,
                            'x': 0.5,        # Centre le titre horizontalement
                            'xanchor': 'center',  # Point d'ancrage du titre
                            'yanchor': 'top'      # Position verticale du titre
                        }
                    )
                    
                    # Affichage du graphique
                    st.plotly_chart(fig, use_container_width=True)
